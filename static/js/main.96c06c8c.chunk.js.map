{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","conditions","description","error","API_KEY","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAWeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,6BAAd,mDCIOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,iDC0BOC,EA9BC,SAAAN,GAAK,OAGb,yBAAKF,UAAU,iBAEPE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,YAC/B,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAiDP,EAAMQ,UAIvDR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,eACrB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,cAIzCT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,YAClB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,WAIzCV,EAAMW,YAAc,uBAAGb,UAAU,gBAAb,cACpB,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMY,cAIzCZ,EAAMa,OAAS,uBAAGf,UAAU,kBAAkBE,EAAMa,SCnB9DC,EAAS,mCA+EAC,E,2MA1EbC,MAAQ,CACNP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGTf,WAAa,SAAOgB,GAAP,qBAAAC,EAAAC,OAAA,uDACXF,EAAEG,iBACId,EAAOW,EAAEI,OAAOC,SAAShB,KAAKiB,MAC9BhB,EAAUU,EAAEI,OAAOC,SAASf,QAAQgB,MAH/B,WAAAL,EAAA,MAIYM,MAAM,oDAAD,OAAqDlB,EAArD,YAA6DC,EAA7D,kBAA8EM,KAJ/F,cAILY,EAJK,kBAAAP,EAAA,MAKQO,EAASC,QALjB,OAKLC,EALK,OAMXC,QAAQC,IAAIF,GAGTrB,GAAQC,EACT,EAAKuB,SAAS,CACZtB,YAAamB,EAAKI,KAAKC,KACvB1B,KAAMqB,EAAKxB,KACXI,QAASoB,EAAKM,IAAI1B,QAClBE,SAAUkB,EAAKI,KAAKtB,SACpBE,YAAagB,EAAKO,QAAQ,GAAGvB,YAC7BC,MAAO,KAGT,EAAKkB,SAAS,CACZtB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTP,cAAUO,EACVL,iBAAaK,EACbJ,MAAO,4BAzBA,uC,wEA+BX,OACE,6BACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAYkC,KAAKlC,aACvB,kBAAC,EAAD,CACEO,YAAa2B,KAAKpB,MAAMP,YACxBF,KAAM6B,KAAKpB,MAAMT,KACjBC,QAAS4B,KAAKpB,MAAMR,QACpBE,SAAU0B,KAAKpB,MAAMN,SACrBE,YAAawB,KAAKpB,MAAMJ,YACxBC,MAAOuB,KAAKpB,MAAMH,kB,GA3DpBwB,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.96c06c8c.chunk.js","sourcesContent":["// This import statement has to appear in every single component!\nimport React from 'react';\n\n// stateless conditional component\nconst Titles = () => (\n    <div>\n        <h1 className='title-container__title'>Weather Finder</h1>\n        <h3 className='title-container__subtitle'>Find out temperature, conditions, and more...</h3>\n    </div>\n);\n\nexport default Titles;","import React from 'react';\n\n// stateless conditional component\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n        <input type='text' name='city' placeholder='City...'></input>\n        <input type='text' name='country' placeholder='Country...'></input>\n        <button>Get Weather</button>\n    </form>\n);\n\nexport default Form;","import React from 'react';\n\n// A stateless conditional component that has no state!\nconst Weather = props => (\n// Notice there's no render method.\n// We're also not using return because we're returning only one thing.\n        <div className='weather__info'>\n            {\n                props.city && props.country && <p className='weather__key'>Location: \n                <span className='weather__value'> {props.city}, {props.country}</span>\n                </p>\n            }\n            {\n                props.temperature && <p className='weather__key'>Temperature: \n                <span className='weather__value'> {props.temperature}</span>\n                </p>\n            }\n            {\n                props.humidity && <p className='weather__key'>Humidity: \n                <span className='weather__value'> {props.humidity}</span>\n                </p>\n            }\n            {\n                props.conditions && <p className='weather__key'>Conditions: \n                <span className='weather__value'> {props.description}</span>\n                </p>\n            }\n            {\n                props.error && <p className='weather__error'>{props.error}</p>\n            }\n        </div>\n);\n\nexport default Weather;","// This file is the major, \"wrapper\" component.\n\n// Importing necessary packages and components\nimport React from 'react';\n\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY ='49037379791178e87b7d2059ddbbfba6';\n\n// Initializing a component\nclass App extends React.Component {\n  // Initializing a state\n  state = { // State is an object that lives within a component. It's responsible for keeping track of changing data within a component.\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault(); // prevents the default behavior of this component when we press the button\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`); // Use template strings to inject variables that you have defined within your files\n    const data = await api_call.json();\n    console.log(data);\n    // this.state.temperature =   Never do this! Never directly manipulate a state!\n\n    if(city && country) { // If city and country have been indicated\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: ''\n      });      \n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the value.'\n      }); \n    }\n\n  }\n  render() {\n    return (\n      <div>\n        <div className='wrapper'>\n          <div className='main'>\n            <div className='container'>\n              <div className='row'>\n                <div className='col-xs-5 title-container'>\n                  <Titles />\n                </div>\n                <div className='col-xs-7 form-container'>\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature={this.state.temperature} \n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\n\n\n\n\n// Export the component\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Render out the App component to the root element\n// ReactDom.render(Name of the component, location where the component is rendered);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}